<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HEAD>
<TITLE>
jGuru: RMI Parameters
</TITLE>
  <META NAME="AUTHOR" CONTENT="jGuru.com">
  <META NAME="DESCRIPTION" CONTENT="RMI">
  <META NAME="KEYWORDS" CONTENT="RMI">
  <META NAME="OWNER" CONTENT="Editorial/JDC">
  <META NAME="revision" CONTENT="@(#)index2.src 1.2 06/09/99  JDC">
  
  <STYLE TYPE="text/css">
    <!-- 
    CODE {font-family: Courier, Monospace;
          font-size: 12pt}
    PRE {font-family: Courier, Monospace;
         font-size: 11pt}
      -->
  </STYLE>
</HEAD>

<!-- BODY-TEMPLATE -->
<!-- PAGETOP-TEMPLATE -->
<!-- NAVBAR-TEMPLATE -->

<!-- START SUB-NAV -->

<TR>
  <TD><!-- INSERT SUB-NAV INFO -->
  </TD>
</TR>


<!-- END SUB-NAV -->

</TABLE>

<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD>

<FONT FACE="Verdana, Arial, Helvetica, sans-serif">

<!-- Template Version 2.0 -->

<!-- ================== -->
<!-- Start Main Content -->
<!-- ================== -->
<A NAME="TOP"></A>
<DIV ALIGN="RIGHT">
  <H3>Fundamentals of RMI</H3>
  <H2>RMI Parameters</H2>
  
 <H4><EM><FONT SIZE="-1">by <A HREF="http://www.jGuru.com" TARGET="_blank"><img 
src="../../images/jguru-xxxsm.gif" width=66 height=20 border="0" 
alt="jGuru"></A></EM></H4>
 [<A HREF="help.html">Help</A> | 
  <A HREF="http://java.sun.com/products/jdk/1.2/docs/api">API Docs</A> |
  <A HREF="../../RMI.html">Short Course</A>|
  <A HREF="../../exercises.html">Exercises</A>]
  </FONT>
  </DIV>


<BR><BR>
In this exercise you will create an RMI service that returns two objects to the client.

As in <A 
HREF="../../exercises/SimpleBankingSystem/index.html"><CODE>SimpleBankingSyste
m</CODE></A>
you need to change the constant <CODE>HOST_NAME</CODE> to match
your computer's name on the network.
<P>
You will also extend the <CODE>Hello</CODE> interface
and <CODE>HelloImpl</CODE> class to send a Java<FONT 
SIZE="-2"><SUP>TM</SUP></FONT> object <CODE>MessageObject</CODE>
from the server to the client.
<P>
While you are making these changes, take a careful look at 
<CODE>MessageObject</CODE>. 
It defines both a class variable and an object variable, which are both
incremented each time the class is instantiated.
By observing how these counters are incremented on the server
and client side you can observe that RMI sends object instance
information between Java<FONT SIZE="-2"><SUP>TM</SUP></FONT> Virtual 
Machines<A HREF="#TJVM"><SUP>1</SUP></A>(JVMs), but not the static or class-level information.
<P>
The course material for this exercise is covered in
<A HREF="../../RMI.html#ParametersInRMI">Parameters in RMI</A>.

<H3>Prerequisites</H3>
<UL>
<P>


<A HREF="../../exercises/SimpleBankingSystem/index.html">Simple Banking 
System</A> </UL>
<H3>Skeleton Code</H3>
<UL><CODE>
<A HREF="Hello.java">Hello.java</A><BR>
<A HREF="HelloImpl.java">HelloImpl.java</A><BR>
<A HREF="MessageObject.java">MessageObject.java</A><BR>
<A HREF="RMIServer.java">RMIServer.java</A><BR>
<A HREF="RMIClient.java">RMIClient.java</A></CODE>
</UL>
<P>
<H3>Tasks</H3>
<BR>
<OL>
<A HREF="help.html#1"><LI></A>
<P>

<P>

Add the <CODE>getMessageObject</CODE> method to the <CODE>Hello</CODE> 
interface.

<P>
<A HREF="help.html#2"><LI></A>
<P>

Create an implementation for the <CODE>getMessageObject</CODE> method in the 
<CODE>HelloImpl</CODE> class.
<P>
<A HREF="help.html#3"><LI></A>
<P>


Compile all of the class files for the server and its remote objects.

<P>
<A HREF="help.html#4"><LI></A>
<P>


Create the <CODE>stub</CODE> and <CODE>skeleton</CODE> files for the remote 
object implementation.


<p>
<A HREF="help.html#5"><LI></A>
<P>


Start the RMI Server in its own DOS console. 

<P>
<A HREF="help.html#6"><LI></A>


<P>

Start the RMI Client in its own DOS console. 

</OL>

<P>
Where help exists, the task numbers above are linked to the
step-by-step <A HREF="help.html">help</A> page.

<H3>Solution Source</H3>
<P>

<UL><CODE>
<A HREF=solution/Hello.java>Hello.java</A><BR>
<A HREF=solution/HelloImpl.java>HelloImpl.java</A><BR>
<A HREF=solution/MessageObject.java>MessageObject.java</A><BR>
<A HREF=solution/RMIServer.java>RMIServer.java</A><BR>
<A HREF=solution/RMIClient.java>RMIClient.java</A></CODE>
</UL>
<H4 ALIGN="RIGHT"><A HREF="#TOP">TOP</A></H4>
<H3>Demonstration</H3>

<P>
When the server is run in its DOS console, the output will be:<P>
<CODE>Registry created on host computer &lt;your_computer_name&gt; 
  on port 10002
Remote HelloService implementation object created
Bindings Finished, waiting for client requests.</CODE>
<P>
Then when the client is run in its DOS console, the output will be:
<p>
<CODE>HelloService lookup successful
The server says: Hello!</CODE><P>
printing the message (&quot;Hello!&quot;) you defined in your implementation 
object.
<P>
As your client runs both the server console and the client
console it prints the instantiation messages from
<CODE>MessageObject</CODE>. The server console displays:

<pre>
MessageObject: Class Number is #0 Object Number is #0
MessageObject: Class Number is #1 Object Number is #1
MessageObject: Class Number is #2 Object Number is #2
MessageObject: Class Number is #3 Object Number is #3
MessageObject: Class Number is #4 Object Number is #4
MessageObject: Class Number is #5 Object Number is #5
MessageObject: Class Number is #6 Object Number is #6
MessageObject: Class Number is #7 Object Number is #7
MessageObject: Class Number is #8 Object Number is #8
MessageObject: Class Number is #9 Object Number is #9
</pre>
<P>
While the client console displays:

<pre>
MessageObject: Class Number is #0 Object Number is #0
MessageObject: Class Number is #0 Object Number is #1
MessageObject: Class Number is #0 Object Number is #2
MessageObject: Class Number is #0 Object Number is #3
MessageObject: Class Number is #0 Object Number is #4
MessageObject: Class Number is #0 Object Number is #5
MessageObject: Class Number is #0 Object Number is #6
MessageObject: Class Number is #0 Object Number is #7
MessageObject: Class Number is #0 Object Number is #8
MessageObject: Class Number is #0 Object Number is #9
</pre>
<P>
Notice the difference in the class numbers.

<P>
While the <CODE>MessageObject</CODE> instance
is moved between the server and the client, the two JVMs load 
their own, independent copies of the class file.
The class variable is incremented on the server, but this is
not reflected on the client side.

<H4><A HREF="../RMICallback/index.html">Next Magercise</A></H4>
<H4><A HREF="../../exercises.html">Exercises</A></H4>
<H4><A HREF="../../RMI.html">Short Course</A></H4>
<H4><A HREF="../../index.html">Feedback</A></H4><H4 ALIGN="RIGHT"><A HREF="#TOP">TOP</A></H4>
<P><font FACE="verdana,arial,helvetica" SIZE="1">Copyright 1996-2000 <A 
HREF="http://www.jguru.com">jGuru.com</A>. All Rights Reserved.</font></p>
<P>
_______<BR>
<A NAME="TJVM"><SUP>1</SUP></A> As used on this web site, the terms &quot;Java 
virtual machine&quot; or &quot;JVM&quot; mean a virtual machine for the Java 
platform.
<!-- ================ -->
<!-- End Main Content -->
<!-- ================ -->

</TD>
</TR>
</TABLE>

<!-- COPYRIGHT-TEMPLATE -->

</BODY>
</HTML>
